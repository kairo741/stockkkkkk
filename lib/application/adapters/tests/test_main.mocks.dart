// Mocks generated by Mockito 5.3.0 from annotations
// in stockkkkkk/application/adapters/tests/test_main.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stockkkkkk/domain/dto/stockDTO.dart' as _i5;
import 'package:stockkkkkk/infra/adapters/tests/data_service.dart' as _i3;
import 'package:stockkkkkk/infra/adapters/tests/data_store.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataStore_0 extends _i1.SmartFake implements _i2.DataStore {
  _FakeDataStore_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [DataService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataService extends _i1.Mock implements _i3.DataService {
  MockDataService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DataStore get store => (super.noSuchMethod(Invocation.getter(#store),
          returnValue: _FakeDataStore_0(this, Invocation.getter(#store)))
      as _i2.DataStore);
  @override
  _i4.Future<List<_i5.StockDTO>> findAll() => (super.noSuchMethod(
          Invocation.method(#findAll, []),
          returnValue: _i4.Future<List<_i5.StockDTO>>.value(<_i5.StockDTO>[]))
      as _i4.Future<List<_i5.StockDTO>>);
  @override
  dynamic save(_i5.StockDTO? dto) =>
      super.noSuchMethod(Invocation.method(#save, [dto]));
}
